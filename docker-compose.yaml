version: '3'

services:

  pong_database:
    container_name: pong_database
    build:
      context: ./pong_database
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: pong
      NESTJS_USER: ${NESTJS_USER}
      NESTJS_PASSWORD: ${NESTJS_PASSWORD}
    volumes:
      - ./pong_database/db:/var/lib/postgresql
    networks:
      - pong

  pong_nestjs:
    container_name: pong_nestjs
    depends_on:
      - pong_database
    restart: always
    environment:
      - DB_HOST=pong_database
      - DB_PORT=5432
      - DB_USERNAME=${NESTJS_USER}
      - DB_PASSWORD=${NESTJS_PASSWORD}
      - DB_NAME=pong
      - ACCESS_SECRET=${ACCESS_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      - SERVER_HOST=${SERVER_HOST}
      - MODE=pong
    build:
      context: ./pong_nestjs
      dockerfile: Dockerfile
    command: npm run start:dev
    # command: /entrypoint.sh npm run start:debug
    working_dir: /pong_nestjs
    networks:
      - pong
    volumes:
      - ./pong_nestjs/src:/pong_nestjs/src

  pong_front:
    container_name: pong_front
    restart: always
    # environment:
    #   - VITE_BASE_URL=
    build:
      context: ./pong_front
      dockerfile: Dockerfile
    # command: npm run dev
    working_dir: /pong_front
    networks:
      - pong
    volumes:
      - ./pong_front/src:/pong_front/src

  pong_proxy:
    container_name: pong_proxy
    depends_on:
      - pong_nestjs
      # - pong_front
    environment:
      - SERVER_HOST=${SERVER_HOST}
    build: ./pong_proxy
    ports:
      - '80:80'
    networks:
      - pong
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./pong_proxy/templates:/templates:ro


networks: # 네트워크를 사용하겠다는 선언입니다. 선언하지 않을 경우 기본 네트워크가 사용됩니다.
  pong: # 기본 설정을 이용하여 pong이라는 네트워크를 선언합니다. pong network를 사용하는 컨테이너들은 서로 간에 서비스의 이름으로 접근할 수 있습니다.
    name: pong_network
    driver: bridge
