version: '3'

services:
  pong_admin:
    container_name: pong_admin
    restart: always
    environment:
      - VITE_BASE_URL=/api
    build:
      context: ./pong_admin # 사용할 도커파일의 경로.
      dockerfile: Dockerfile # 도커파일의 이름을 명시.
    command: npm run pong
    working_dir: /pong_admin # 컨테이너 내부에서 기본적으로 사용할 디렉토리를 지정.
    networks: # 사용할 네트워크(최하단)를 설정.
      - pong
    volumes:
      - ./pong_admin/src:/pong_admin/src # ':' 왼쪽의 host 폴더를 오른쪽의 container 폴더에 마운트.

  pong_app:
    container_name: pong_front
    restart: always
    environment:
      - VITE_BASE_URL=
    build:
      context: ./pong_front
      dockerfile: Dockerfile
    command: npm run pong
    working_dir: /pong_front
    networks:
      - pong
    volumes:
      - ./pong_front/src:/pong_front/src

  pong_database:
    container_name: pong_database
    build:
      context: ./pong_database
      args:
        NESTJS_USER: ${NESTJS_USER}
        NESTJS_PASSWORD: ${NESTJS_PASSWORD}
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: pong
    volumes:
    #   - ./pong_database/my.cnf:/etc/mysql/my.cnf:ro
      - ./pong_database/db:/var/lib/postgresql
    networks:
      - pong

  pong_nestjs:
    container_name: pong_nestjs
    restart: always
    environment:
      - DB_HOST=pong_database
      - DB_PORT=3306
      - DB_USERNAME=${NESTJS_USER}
      - DB_PASSWORD=${NESTJS_PASSWORD}
      - DB_NAME=pong
      - ACCESS_SECRET=${ACCESS_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      - SERVER_HOST=${SERVER_HOST}
      - MODE=pong
    build:
      context: ./pong_nestjs
      dockerfile: Dockerfile
    command: npm run pong
    working_dir: /pong_nestjs
    networks:
      - pong
    volumes:
      - ./pong_nestjs/src:/pong_nestjs/src

  pong_proxy:
    container_name: pong_proxy
    environment:
      - SERVER_HOST=${SERVER_HOST}
    build: ./pong_proxy
    networks:
      - pong
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./pong_proxy/templates:/templates:ro

networks: # 네트워크를 사용하겠다는 선언입니다. 선언하지 않을 경우 기본 네트워크가 사용됩니다.
  pong: # 기본 설정을 이용하여 pong이라는 네트워크를 선언합니다. pong network를 사용하는 컨테이너들은 서로 간에 서비스의 이름으로 접근할 수 있습니다.
    name: pong_network
    driver: bridge
